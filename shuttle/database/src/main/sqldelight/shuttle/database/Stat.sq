import shuttle.database.model.DatabaseAppId;
import shuttle.database.model.DatabaseDate;
import shuttle.database.model.DatabaseGeoHash;
import shuttle.database.model.DatabaseTime;

CREATE TABLE IF NOT EXISTS stat (
    appId TEXT AS DatabaseAppId NOT NULL,
    geoHash TEXT AS DatabaseGeoHash,
    date INTEGER AS DatabaseDate NOT NULL,
    time INTEGER AS DatabaseTime NOT NULL,

    PRIMARY KEY (appId, geoHash, date, time)
);

insertStat:
    INSERT OR IGNORE INTO stat(appId, geoHash, date, time)
    VALUES (?, ?, ?, ?);

insertLocationStat:
    INSERT OR REPLACE INTO locationStat(appId, geoHash, count)
    VALUES (?, ?, ?);

insertTimeStat:
    INSERT OR REPLACE INTO timeStat(appId, time, count)
    VALUES (?, ?, ?);

deleteLocationStatsForApp:
    DELETE FROM locationStat
    WHERE appId = ?;

deleteTimeStatsForApp:
    DELETE FROM timeStat
    WHERE appId = ?;


findLocationStat:
    SELECT * FROM locationStat
    WHERE appId = ? AND geoHash = ?;

findTimeStat:
    SELECT * FROM timeStat
    WHERE appId = ? AND time = ?;

findAllStats:
    SELECT * FROM stat
    WHERE (stat.time >= :startTime AND stat.time <= :endTime);

findAllStatsByGeoHash:
    SELECT * FROM stat
    WHERE (stat.time >= :startTime AND stat.time <= :endTime)
    AND geoHash = :geoHash;

findAllStatsFromLocationAndTimeTables:
        SELECT
            locationStat.appId AS appIdByLocation,
            locationStat.geoHash AS location,
            NULL AS appIdByTime,
            NULL AS time
        FROM locationStat
    UNION ALL
        SELECT
            NULL AS appIdByLocation,
            NULL AS location,
            timeStat.appId AS appIdByTime,
            timeStat.time AS time
        FROM timeStat;

clearAllStatsOlderThan:
    DELETE FROM stat WHERE date < ?;

clearAllStatsFromLocationTable:
   DELETE FROM locationStat;

clearAllStatsFromTimeTable:
   DELETE FROM timeStat;

findAllStatsOld:
        SELECT
            locationStat.appId AS appIdByLocation,
            NULL AS appIdByTime,
            SUM(locationStat.count) AS countByLocation,
            0 AS countByTime
        FROM locationStat
        WHERE locationStat.geoHash = :geoHash
        GROUP BY appId
    UNION ALL
        SELECT
            NULL AS appIdByLocation,
            timeStat.appId AS appIdByTime,
            0 AS countByLocation,
            SUM(timeStat.count) AS countByTime
        FROM timeStat
        WHERE
            (timeStat.time >= :startTime AND timeStat.time <= :endTime)
        GROUP BY appId
    ORDER BY appIdByLocation, appIdByTime, countByLocation DESC, countByTime DESC;
